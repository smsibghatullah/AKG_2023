)]}'
{"version": 3, "sources": ["/point_of_sale/static/src/js/chrome_adapter.js", "/point_of_sale/static/src/js/main.js", "/web/static/src/start.js", "/web/static/src/legacy/legacy_setup.js"], "mappings": "AAAA;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvDA;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AClCA;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC7CA;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA", "sourcesContent": ["/** @odoo-module */\n\nimport { useService } from \"@web/core/utils/hooks\";\n\nimport Chrome from \"point_of_sale.Chrome\";\nimport Registries from \"point_of_sale.Registries\";\nimport { configureGui } from \"point_of_sale.Gui\";\nimport { useBus } from \"@web/core/utils/hooks\";\nconst { Component } = owl;\nimport { registry } from \"@web/core/registry\";\n\nfunction setupResponsivePlugin(env) {\n    const isMobile = () => window.innerWidth <= 768;\n    env.isMobile = isMobile();\n    const updateEnv = owl.utils.debounce(() => {\n        if (env.isMobile !== isMobile()) {\n            env.isMobile = !env.isMobile;\n            env.qweb.forceUpdate();\n        }\n    }, 15);\n    window.addEventListener(\"resize\", updateEnv);\n}\n\nexport class ChromeAdapter extends Component {\n    setup() {\n        this.PosChrome = Registries.Component.get(Chrome);\n        this.legacyActionManager = useService(\"legacy_action_manager\");\n\n        this.env = owl.Component.env;\n        useBus(this.env.qweb, \"update\", () => this.render());\n        setupResponsivePlugin(this.env);\n\n        const chrome = owl.hooks.useRef(\"chrome\");\n        owl.hooks.onMounted(async () => {\n            // Add the pos error handler when the chrome component is available.\n            registry.category('error_handlers').add(\n                'posErrorHandler',\n                (env, ...noEnvArgs) => {\n                    if (chrome.comp) {\n                        return chrome.comp.errorHandler(this.env, ...noEnvArgs);\n                    }\n                    return false;\n                },\n                { sequence: 0 }\n            );\n            // Little trick to avoid displaying the block ui during the POS models loading\n            const BlockUiFromRegistry = registry.category(\"main_components\").get(\"BlockUI\");\n            registry.category(\"main_components\").remove(\"BlockUI\");\n            configureGui({ component: chrome.comp });\n            await chrome.comp.start();\n            registry.category(\"main_components\").add(\"BlockUI\", BlockUiFromRegistry);\n        });\n    }\n}\nChromeAdapter.template = owl.tags.xml`<PosChrome t-ref=\"chrome\" webClient=\"legacyActionManager\"/>`;\n", "/** @odoo-module */\n\nimport { startWebClient } from \"@web/start\";\n\nimport { ChromeAdapter } from \"@point_of_sale/js/chrome_adapter\";\nimport Registries from \"point_of_sale.Registries\";\nimport { registry } from \"@web/core/registry\";\n\n// For consistency's sake, we should trigger\"WEB_CLIENT_READY\" on the bus when PosApp is mounted\n// But we can't since mail and some other poll react on that cue, and we don't want those services started\nclass PosApp extends owl.Component {\n    setup() {\n        this.Components = registry.category(\"main_components\").getEntries();\n    }\n}\nPosApp.template = owl.tags.xml`\n  <body>\n    <ChromeAdapter />\n    <div>\n      <t t-foreach=\"Components\" t-as=\"C\" t-key=\"C[0]\">\n        <t t-component=\"C[1].Component\" t-props=\"C[1].props\"/>\n      </t>\n    </div>\n  </body>\n`;\nPosApp.components = { ChromeAdapter };\n\nfunction startPosApp() {\n    Registries.Component.add(owl.misc.Portal);\n    Registries.Component.freeze();\n    startWebClient(PosApp);\n}\n\nstartPosApp();\n", "/** @odoo-module **/\n\nimport { makeEnv, startServices } from \"./env\";\nimport { legacySetupProm } from \"./legacy/legacy_setup\";\nimport { mapLegacyEnvToWowlEnv } from \"./legacy/utils\";\nimport { processTemplates } from \"./core/assets\";\nimport { session } from \"@web/session\";\n\nconst { mount, utils } = owl;\nconst { whenReady } = utils;\n\n/**\n * Function to start a webclient.\n * It is used both in community and enterprise in main.js.\n * It's meant to be webclient flexible so we can have a subclass of\n * webclient in enterprise with added features.\n *\n * @param {owl.Component} Webclient\n */\nexport async function startWebClient(Webclient) {\n    odoo.info = {\n        db: session.db,\n        server_version: session.server_version,\n        server_version_info: session.server_version_info,\n        isEnterprise: session.server_version_info.slice(-1)[0] === \"e\",\n    };\n    odoo.isReady = false;\n\n    // setup environment\n    const env = makeEnv();\n    const [, templates] = await Promise.all([\n        startServices(env),\n        odoo.loadTemplatesPromise.then(processTemplates),\n    ]);\n    env.qweb.addTemplates(templates);\n\n    // start web client\n    await whenReady();\n    const legacyEnv = await legacySetupProm;\n    mapLegacyEnvToWowlEnv(legacyEnv, env);\n    const root = await mount(Webclient, { env, target: document.body, position: \"self\" });\n    // delete odoo.debug; // FIXME: some legacy code rely on this\n    odoo.__WOWL_DEBUG__ = { root };\n    odoo.isReady = true;\n}\n", "/** @odoo-module alias=web.legacySetup **/\n\nimport { registry } from \"../core/registry\";\nimport {\n    makeLegacyNotificationService,\n    makeLegacyRpcService,\n    makeLegacySessionService,\n    makeLegacyDialogMappingService,\n    makeLegacyCrashManagerService,\n    makeLegacyCommandService,\n    makeLegacyDropdownService,\n} from \"./utils\";\nimport { makeLegacyActionManagerService } from \"./backend_utils\";\nimport * as AbstractService from \"web.AbstractService\";\nimport * as legacyEnv from \"web.env\";\nimport * as session from \"web.session\";\nimport * as makeLegacyWebClientService from \"web.pseudo_web_client\";\n\nconst { Component, config, utils } = owl;\nconst { whenReady } = utils;\n\nlet legacySetupResolver;\nexport const legacySetupProm = new Promise((resolve) => {\n    legacySetupResolver = resolve;\n});\n\n// build the legacy env and set it on owl.Component (this was done in main.js,\n// with the starting of the webclient)\n(async () => {\n    config.mode = legacyEnv.isDebug() ? \"dev\" : \"prod\";\n    AbstractService.prototype.deployServices(legacyEnv);\n    Component.env = legacyEnv;\n    const legacyActionManagerService = makeLegacyActionManagerService(legacyEnv);\n    const serviceRegistry = registry.category(\"services\");\n    serviceRegistry.add(\"legacy_action_manager\", legacyActionManagerService);\n    // add a service to redirect rpc events triggered on the bus in the\n    // legacy env on the bus in the wowl env\n    const legacyRpcService = makeLegacyRpcService(legacyEnv);\n    serviceRegistry.add(\"legacy_rpc\", legacyRpcService);\n    const legacySessionService = makeLegacySessionService(legacyEnv, session);\n    serviceRegistry.add(\"legacy_session\", legacySessionService);\n    const legacyWebClientService = makeLegacyWebClientService(legacyEnv);\n    serviceRegistry.add(\"legacy_web_client\", legacyWebClientService);\n    serviceRegistry.add(\"legacy_notification\", makeLegacyNotificationService(legacyEnv));\n    serviceRegistry.add(\"legacy_crash_manager\", makeLegacyCrashManagerService(legacyEnv));\n    const legacyDialogMappingService = makeLegacyDialogMappingService(legacyEnv);\n    serviceRegistry.add(\"legacy_dialog_mapping\", legacyDialogMappingService);\n    const legacyCommandService = makeLegacyCommandService(legacyEnv);\n    serviceRegistry.add(\"legacy_command\", legacyCommandService);\n    serviceRegistry.add(\"legacy_dropdown\", makeLegacyDropdownService(legacyEnv));\n    await Promise.all([whenReady(), session.is_bound]);\n    legacyEnv.qweb.addTemplates(session.owlTemplates);\n    legacySetupResolver(legacyEnv);\n})();\n"], "file": "/web/assets/432-2021293/point_of_sale.assets_backend_prod_only.js", "sourceRoot": "../../../"}