
/* /point_of_sale/static/src/js/chrome_adapter.js defined in bundle 'point_of_sale.assets_backend_prod_only' */
odoo.define('@point_of_sale/js/chrome_adapter',async function(require){'use strict';let __exports={};const{useService}=require("@web/core/utils/hooks");const Chrome=require("point_of_sale.Chrome");const Registries=require("point_of_sale.Registries");const{configureGui}=require("point_of_sale.Gui");const{useBus}=require("@web/core/utils/hooks");const{Component}=owl;const{registry}=require("@web/core/registry");function setupResponsivePlugin(env){const isMobile=()=>window.innerWidth<=768;env.isMobile=isMobile();const updateEnv=owl.utils.debounce(()=>{if(env.isMobile!==isMobile()){env.isMobile=!env.isMobile;env.qweb.forceUpdate();}},15);window.addEventListener("resize",updateEnv);}
const ChromeAdapter=__exports.ChromeAdapter=class ChromeAdapter extends Component{setup(){this.PosChrome=Registries.Component.get(Chrome);this.legacyActionManager=useService("legacy_action_manager");this.env=owl.Component.env;useBus(this.env.qweb,"update",()=>this.render());setupResponsivePlugin(this.env);const chrome=owl.hooks.useRef("chrome");owl.hooks.onMounted(async()=>{registry.category('error_handlers').add('posErrorHandler',(env,...noEnvArgs)=>{if(chrome.comp){return chrome.comp.errorHandler(this.env,...noEnvArgs);}
return false;},{sequence:0});const BlockUiFromRegistry=registry.category("main_components").get("BlockUI");registry.category("main_components").remove("BlockUI");configureGui({component:chrome.comp});await chrome.comp.start();registry.category("main_components").add("BlockUI",BlockUiFromRegistry);});}}
ChromeAdapter.template=owl.tags.xml`<PosChrome t-ref="chrome" webClient="legacyActionManager"/>`;return __exports;});;

/* /point_of_sale/static/src/js/main.js defined in bundle 'point_of_sale.assets_backend_prod_only' */
odoo.define('@point_of_sale/js/main',async function(require){'use strict';let __exports={};const{startWebClient}=require("@web/start");const{ChromeAdapter}=require("@point_of_sale/js/chrome_adapter");const Registries=require("point_of_sale.Registries");const{registry}=require("@web/core/registry");class PosApp extends owl.Component{setup(){this.Components=registry.category("main_components").getEntries();}}
PosApp.template=owl.tags.xml`
  <body>
    <ChromeAdapter />
    <div>
      <t t-foreach="Components" t-as="C" t-key="C[0]">
        <t t-component="C[1].Component" t-props="C[1].props"/>
      </t>
    </div>
  </body>
`;PosApp.components={ChromeAdapter};function startPosApp(){Registries.Component.add(owl.misc.Portal);Registries.Component.freeze();startWebClient(PosApp);}
startPosApp();return __exports;});;

/* /web/static/src/start.js defined in bundle 'point_of_sale.assets_backend_prod_only' */
odoo.define('@web/start',async function(require){'use strict';let __exports={};const{makeEnv,startServices}=require("@web/env");const{legacySetupProm}=require("@web/legacy/legacy_setup");const{mapLegacyEnvToWowlEnv}=require("@web/legacy/utils");const{processTemplates}=require("@web/core/assets");const{session}=require("@web/session");const{mount,utils}=owl;const{whenReady}=utils;__exports.startWebClient=startWebClient;async function startWebClient(Webclient){odoo.info={db:session.db,server_version:session.server_version,server_version_info:session.server_version_info,isEnterprise:session.server_version_info.slice(-1)[0]==="e",};odoo.isReady=false;const env=makeEnv();const[,templates]=await Promise.all([startServices(env),odoo.loadTemplatesPromise.then(processTemplates),]);env.qweb.addTemplates(templates);await whenReady();const legacyEnv=await legacySetupProm;mapLegacyEnvToWowlEnv(legacyEnv,env);const root=await mount(Webclient,{env,target:document.body,position:"self"});odoo.__WOWL_DEBUG__={root};odoo.isReady=true;}
return __exports;});;

/* /web/static/src/legacy/legacy_setup.js defined in bundle 'point_of_sale.assets_backend_prod_only' */
odoo.define('@web/legacy/legacy_setup',async function(require){'use strict';let __exports={};const{registry}=require("@web/core/registry");const{makeLegacyNotificationService,makeLegacyRpcService,makeLegacySessionService,makeLegacyDialogMappingService,makeLegacyCrashManagerService,makeLegacyCommandService,makeLegacyDropdownService,}=require("@web/legacy/utils");const{makeLegacyActionManagerService}=require("@web/legacy/backend_utils");const AbstractService=require("web.AbstractService");const legacyEnv=require("web.env");const session=require("web.session");const makeLegacyWebClientService=require("web.pseudo_web_client");const{Component,config,utils}=owl;const{whenReady}=utils;let legacySetupResolver;const legacySetupProm=__exports.legacySetupProm=new Promise((resolve)=>{legacySetupResolver=resolve;});(async()=>{config.mode=legacyEnv.isDebug()?"dev":"prod";AbstractService.prototype.deployServices(legacyEnv);Component.env=legacyEnv;const legacyActionManagerService=makeLegacyActionManagerService(legacyEnv);const serviceRegistry=registry.category("services");serviceRegistry.add("legacy_action_manager",legacyActionManagerService);const legacyRpcService=makeLegacyRpcService(legacyEnv);serviceRegistry.add("legacy_rpc",legacyRpcService);const legacySessionService=makeLegacySessionService(legacyEnv,session);serviceRegistry.add("legacy_session",legacySessionService);const legacyWebClientService=makeLegacyWebClientService(legacyEnv);serviceRegistry.add("legacy_web_client",legacyWebClientService);serviceRegistry.add("legacy_notification",makeLegacyNotificationService(legacyEnv));serviceRegistry.add("legacy_crash_manager",makeLegacyCrashManagerService(legacyEnv));const legacyDialogMappingService=makeLegacyDialogMappingService(legacyEnv);serviceRegistry.add("legacy_dialog_mapping",legacyDialogMappingService);const legacyCommandService=makeLegacyCommandService(legacyEnv);serviceRegistry.add("legacy_command",legacyCommandService);serviceRegistry.add("legacy_dropdown",makeLegacyDropdownService(legacyEnv));await Promise.all([whenReady(),session.is_bound]);legacyEnv.qweb.addTemplates(session.owlTemplates);legacySetupResolver(legacyEnv);})();return __exports;});odoo.define(`web.legacySetup`,async function(require){return require('@web/legacy/legacy_setup')[Symbol.for("default")];});